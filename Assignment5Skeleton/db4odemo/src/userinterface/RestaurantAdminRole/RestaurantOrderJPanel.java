/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.RestaurantAdminRole;

import Business.DeliveryMan.DeliveryMan;
import Business.DeliveryMan.DeliveryManDirectory;
import Business.EcoSystem;
import Business.Menu.MenuDirectory;
import Business.Order.Order;
import Business.Order.OrderDirectory;
import Business.Restaurant.RestaurantDirectory;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kinjal
 */
public class RestaurantOrderJPanel extends javax.swing.JPanel {

    /**
     * Creates new form RestaurantOrderJPanel
     */
    private final JPanel userProcessContainer;
    private final UserAccount account;
    private final EcoSystem business;
    private final DeliveryManDirectory deliveryManDirectory;
    
    public RestaurantOrderJPanel(JPanel userProcessContainer, UserAccount account, EcoSystem business, RestaurantDirectory restaurantDirectory, DeliveryManDirectory deliveryManDirectory, MenuDirectory menuDirectory, OrderDirectory orderDirectory) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.business = business;
        this.deliveryManDirectory = deliveryManDirectory;
        populateOrderList();
        populateDeliveryManList();
    }
    
    public void populateOrderList() {
        DefaultTableModel model = (DefaultTableModel) tblOrderList.getModel();
        model.setRowCount(0);
        for (Order order : business.getOrderDirectory().getOrderDirectory()) {
            if (order.getRestaurant().getRestaurantNo().equalsIgnoreCase(account.getEmployee().getName())) {
                Object[] row = new Object[10];
                row[0] = order.getOrderNo();
                row[1] = order.getSender();
                row[2] = (order.getDeliveryMan() == null) ? "Awaiting Confirmation" : order.getDeliveryMan().getName();
                row[3] = order.getMessage();
                row[4] = order.getStatus();
                row[5] = order.getRestaurant().getRestaurantName();
                row[6] = (order.getOrderConfimation() == null ? "Waiting" : order.getOrderConfimation());
                row[7] = order.getItem().getItemName();
                row[8] = order.getQuantity();
                row[9] = order.getQuantity() * order.getItem().getPrice();
                
                model.addRow(row);
            }
        }
    }
    
    public void populateDeliveryManList(){
        DefaultTableModel model = (DefaultTableModel) tblDeliveryMan.getModel();
        model.setRowCount(0);
        for (DeliveryMan deliveryMan : deliveryManDirectory.getDeliveryManDirectory()) {
                Object[] row = new Object[3];
                row[0] = deliveryMan.getName();
                row[1] = deliveryMan.getPhoneNo();
                row[2] = deliveryMan.getDeliveryId();
                model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        lblOrderList = new javax.swing.JLabel();
        scrollOrderList = new javax.swing.JScrollPane();
        tblOrderList = new javax.swing.JTable();
        brnConfirmOrder = new javax.swing.JButton();
        btnAssignDeliveryMan = new javax.swing.JButton();
        scrollDeliveryMan = new javax.swing.JScrollPane();
        tblDeliveryMan = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setBackground(new java.awt.Color(255, 204, 204));

        lblOrderList.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        lblOrderList.setText("Order List");

        tblOrderList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Order No", "Order By", "Deliver By", "Feedback", "Order Status", "Restaurant Name", "DeliveryMan Messageg", "Item Name", "Quantity", "Total Cost"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, true, false, false, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollOrderList.setViewportView(tblOrderList);

        brnConfirmOrder.setText("Confirm Order");
        brnConfirmOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brnConfirmOrderActionPerformed(evt);
            }
        });

        btnAssignDeliveryMan.setText("Assign Delivery Man");
        btnAssignDeliveryMan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignDeliveryManActionPerformed(evt);
            }
        });

        tblDeliveryMan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Delivery Man Name", "Contact No", "Address", "Delivery Man Id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollDeliveryMan.setViewportView(tblDeliveryMan);

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(brnConfirmOrder)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollDeliveryMan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1041, Short.MAX_VALUE)
                    .addComponent(scrollOrderList)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(410, 410, 410)
                                .addComponent(lblOrderList))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAssignDeliveryMan)
                                .addGap(43, 43, 43)
                                .addComponent(btnBack)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblOrderList)
                .addGap(36, 36, 36)
                .addComponent(scrollOrderList, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(brnConfirmOrder)
                .addGap(32, 32, 32)
                .addComponent(scrollDeliveryMan, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnAssignDeliveryMan))
                .addContainerGap(70, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void brnConfirmOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brnConfirmOrderActionPerformed
        // TODO add your handling code here:
        int row = tblOrderList.getSelectedRow();
        int count = tblOrderList.getSelectedRowCount();
        if (count == 1) {
            if (row >= 0) {
                String id = (String) tblOrderList.getValueAt(row, 0);
                Order order = business.getOrderDirectory().fetchOrder(id);
                order.setStatus("Confirmed");
                JOptionPane.showMessageDialog(null, "Order Confirmed!");
                populateOrderList();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Select one order at a time!");
        }
    }//GEN-LAST:event_brnConfirmOrderActionPerformed

    private void btnAssignDeliveryManActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignDeliveryManActionPerformed
        // TODO add your handling code here:
        int row = tblOrderList.getSelectedRow();
        int orderCount = tblOrderList.getSelectedRowCount();
        int deliveryRow = tblDeliveryMan.getSelectedRow();
        int deliverCount = tblDeliveryMan.getSelectedRowCount();
        if(orderCount ==1 && deliverCount == 1){
            if (row >= 0) {
                String orderId = (String) tblOrderList.getValueAt(row,0);
            Order order = business.getOrderDirectory().fetchOrder(orderId);
            System.out.println(order.getStatus().trim());
            if (order.getStatus().trim().equalsIgnoreCase("Confirmed")) {
                if(deliverCount == 1){
                    if (deliveryRow >= 0) {
                        System.out.println("In here"+ deliveryRow);
                    order.setDeliveryMan(deliveryManDirectory.getDeliveryManDirectory().get(deliveryRow));
                    String empId = (String) tblDeliveryMan.getValueAt(deliveryRow,3);
                    UserAccount user = business.getUserAccountDirectory().getUserByEmployeeNo(empId);
                    order.setReceiver(user);
                    order.setStatus("Preparing Order");
                    JOptionPane.showMessageDialog(null, "Delivery Man Assigned!");
                    populateOrderList();
                }
                }
                 else {
                    JOptionPane.showMessageDialog(null, "Select a delivery man to assign from table!");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Order has not been confirmed! Please confirm the order before assigning!");
            }
        }
        
        }
        else{
            JOptionPane.showMessageDialog(null, "Select one order and one deliveryman!");
        }
    }//GEN-LAST:event_btnAssignDeliveryManActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton brnConfirmOrder;
    private javax.swing.JButton btnAssignDeliveryMan;
    private javax.swing.JButton btnBack;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblOrderList;
    private javax.swing.JScrollPane scrollDeliveryMan;
    private javax.swing.JScrollPane scrollOrderList;
    private javax.swing.JTable tblDeliveryMan;
    private javax.swing.JTable tblOrderList;
    // End of variables declaration//GEN-END:variables
}
